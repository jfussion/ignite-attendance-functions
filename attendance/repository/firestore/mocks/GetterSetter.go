// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	firestore "cloud.google.com/go/firestore"
	mock "github.com/stretchr/testify/mock"
)

// GetterSetter is an autogenerated mock type for the GetterSetter type
type GetterSetter struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx
func (_m *GetterSetter) Get(ctx context.Context) (*firestore.DocumentSnapshot, error) {
	ret := _m.Called(ctx)

	var r0 *firestore.DocumentSnapshot
	if rf, ok := ret.Get(0).(func(context.Context) *firestore.DocumentSnapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentSnapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, data, opts
func (_m *GetterSetter) Set(ctx context.Context, data interface{}, opts ...firestore.SetOption) (*firestore.WriteResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *firestore.WriteResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...firestore.SetOption) *firestore.WriteResult); ok {
		r0 = rf(ctx, data, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.WriteResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...firestore.SetOption) error); ok {
		r1 = rf(ctx, data, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
